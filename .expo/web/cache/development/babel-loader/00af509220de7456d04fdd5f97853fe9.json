{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\files\\\\app\\\\team-4\\\\node_modules\\\\react-native-elements\\\\src\\\\icons\\\\Icon.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport getIconType from \"../helpers/getIconType\";\nimport { ViewPropTypes, withTheme } from \"../config\";\n\nvar Icon = function Icon(props) {\n  var type = props.type,\n      name = props.name,\n      size = props.size,\n      color = props.color,\n      iconStyle = props.iconStyle,\n      underlayColor = props.underlayColor,\n      reverse = props.reverse,\n      raised = props.raised,\n      containerStyle = props.containerStyle,\n      reverseColor = props.reverseColor,\n      disabled = props.disabled,\n      disabledStyle = props.disabledStyle,\n      onPress = props.onPress,\n      _props$Component = props.Component,\n      Component = _props$Component === void 0 ? onPress ? TouchableHighlight : View : _props$Component,\n      attributes = _objectWithoutProperties(props, [\"type\", \"name\", \"size\", \"color\", \"iconStyle\", \"underlayColor\", \"reverse\", \"raised\", \"containerStyle\", \"reverseColor\", \"disabled\", \"disabledStyle\", \"onPress\", \"Component\"]);\n\n  var IconComponent = getIconType(type);\n\n  var getBackgroundColor = function getBackgroundColor() {\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? 'white' : 'transparent';\n  };\n\n  return React.createElement(View, {\n    style: containerStyle && containerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    }\n  }, React.createElement(Component, _extends({}, attributes, {\n    underlayColor: reverse ? color : underlayColor || color,\n    style: StyleSheet.flatten([(reverse || raised) && styles.button, (reverse || raised) && {\n      borderRadius: size + 4,\n      height: size * 2 + 4,\n      width: size * 2 + 4\n    }, raised && styles.raised, {\n      backgroundColor: getBackgroundColor(),\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, disabled && styles.disabled, disabled && disabledStyle])\n  }, onPress && {\n    disabled: disabled\n  }, {\n    onPress: onPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    }\n  }), React.createElement(IconComponent, {\n    testID: \"iconIcon\",\n    style: StyleSheet.flatten([{\n      backgroundColor: 'transparent'\n    }, iconStyle && iconStyle]),\n    size: size,\n    name: name,\n    color: reverse ? reverseColor : color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    }\n  })));\n};\n\nIcon.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  Component: PropTypes.elementType,\n  underlayColor: PropTypes.string,\n  reverse: PropTypes.bool,\n  raised: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  iconStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  reverseColor: PropTypes.string,\n  disabled: PropTypes.bool,\n  disabledStyle: ViewPropTypes.style\n};\nIcon.defaultProps = {\n  underlayColor: 'white',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white',\n  disabled: false,\n  type: 'material'\n};\nvar styles = StyleSheet.create({\n  button: {\n    margin: 7\n  },\n  raised: _objectSpread({}, Platform.select({\n    android: {\n      elevation: 2\n    },\n    default: {\n      shadowColor: 'rgba(0,0,0, .4)',\n      shadowOffset: {\n        height: 1,\n        width: 1\n      },\n      shadowOpacity: 1,\n      shadowRadius: 1\n    }\n  })),\n  disabled: {\n    backgroundColor: '#D1D5D8'\n  }\n});\nexport { Icon };\nexport default withTheme(Icon, 'Icon');","map":{"version":3,"sources":["D:/files/app/team-4/node_modules/react-native-elements/src/icons/Icon.js"],"names":["React","PropTypes","getIconType","ViewPropTypes","withTheme","Icon","props","type","name","size","color","iconStyle","underlayColor","reverse","raised","containerStyle","reverseColor","disabled","disabledStyle","onPress","Component","TouchableHighlight","View","attributes","IconComponent","getBackgroundColor","StyleSheet","flatten","styles","button","borderRadius","height","width","backgroundColor","alignItems","justifyContent","propTypes","string","number","elementType","bool","style","NativeText","func","defaultProps","create","margin","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;AASA,OAAOC,WAAP;AACA,SAASC,aAAT,EAAwBC,SAAxB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AAAA,MAElBC,IAFkB,GAiBhBD,KAjBgB,CAElBC,IAFkB;AAAA,MAGlBC,IAHkB,GAiBhBF,KAjBgB,CAGlBE,IAHkB;AAAA,MAIlBC,IAJkB,GAiBhBH,KAjBgB,CAIlBG,IAJkB;AAAA,MAKlBC,KALkB,GAiBhBJ,KAjBgB,CAKlBI,KALkB;AAAA,MAMlBC,SANkB,GAiBhBL,KAjBgB,CAMlBK,SANkB;AAAA,MAOlBC,aAPkB,GAiBhBN,KAjBgB,CAOlBM,aAPkB;AAAA,MAQlBC,OARkB,GAiBhBP,KAjBgB,CAQlBO,OARkB;AAAA,MASlBC,MATkB,GAiBhBR,KAjBgB,CASlBQ,MATkB;AAAA,MAUlBC,cAVkB,GAiBhBT,KAjBgB,CAUlBS,cAVkB;AAAA,MAWlBC,YAXkB,GAiBhBV,KAjBgB,CAWlBU,YAXkB;AAAA,MAYlBC,QAZkB,GAiBhBX,KAjBgB,CAYlBW,QAZkB;AAAA,MAalBC,aAbkB,GAiBhBZ,KAjBgB,CAalBY,aAbkB;AAAA,MAclBC,OAdkB,GAiBhBb,KAjBgB,CAclBa,OAdkB;AAAA,yBAiBhBb,KAjBgB,CAelBc,SAfkB;AAAA,MAelBA,SAfkB,iCAeND,OAAO,GAAGE,kBAAH,GAAwBC,IAfzB;AAAA,MAgBfC,UAhBe,4BAiBhBjB,KAjBgB;;AAmBpB,MAAMkB,aAAa,GAAGtB,WAAW,CAACK,IAAD,CAAjC;;AACA,MAAMkB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,QAAIZ,OAAJ,EAAa;AACX,aAAOH,KAAP;AACD;;AAED,WAAOI,MAAM,GAAG,OAAH,GAAa,aAA1B;AACD,GAND;;AAQA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,cAAc,IAAIA,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,eACMQ,UADN;AAEE,IAAA,aAAa,EAAEV,OAAO,GAAGH,KAAH,GAAWE,aAAa,IAAIF,KAFpD;AAGE,IAAA,KAAK,EAAEgB,UAAU,CAACC,OAAX,CAAmB,CACxB,CAACd,OAAO,IAAIC,MAAZ,KAAuBc,MAAM,CAACC,MADN,EAExB,CAAChB,OAAO,IAAIC,MAAZ,KAAuB;AACrBgB,MAAAA,YAAY,EAAErB,IAAI,GAAG,CADA;AAErBsB,MAAAA,MAAM,EAAEtB,IAAI,GAAG,CAAP,GAAW,CAFE;AAGrBuB,MAAAA,KAAK,EAAEvB,IAAI,GAAG,CAAP,GAAW;AAHG,KAFC,EAOxBK,MAAM,IAAIc,MAAM,CAACd,MAPO,EAQxB;AACEmB,MAAAA,eAAe,EAAER,kBAAkB,EADrC;AAEES,MAAAA,UAAU,EAAE,QAFd;AAGEC,MAAAA,cAAc,EAAE;AAHlB,KARwB,EAaxBlB,QAAQ,IAAIW,MAAM,CAACX,QAbK,EAcxBA,QAAQ,IAAIC,aAdY,CAAnB;AAHT,KAmBMC,OAAO,IAAI;AAAEF,IAAAA,QAAQ,EAARA;AAAF,GAnBjB;AAoBE,IAAA,OAAO,EAAEE,OApBX;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAEO,UAAU,CAACC,OAAX,CAAmB,CACxB;AAAEM,MAAAA,eAAe,EAAE;AAAnB,KADwB,EAExBtB,SAAS,IAAIA,SAFW,CAAnB,CAFT;AAME,IAAA,IAAI,EAAEF,IANR;AAOE,IAAA,IAAI,EAAED,IAPR;AAQE,IAAA,KAAK,EAAEK,OAAO,GAAGG,YAAH,GAAkBN,KARlC;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF,CADF;AAqCD,CAjED;;AAmEAL,IAAI,CAAC+B,SAAL,GAAiB;AACf7B,EAAAA,IAAI,EAAEN,SAAS,CAACoC,MADD;AAEf7B,EAAAA,IAAI,EAAEP,SAAS,CAACoC,MAFD;AAGf5B,EAAAA,IAAI,EAAER,SAAS,CAACqC,MAHD;AAIf5B,EAAAA,KAAK,EAAET,SAAS,CAACoC,MAJF;AAKfjB,EAAAA,SAAS,EAAEnB,SAAS,CAACsC,WALN;AAMf3B,EAAAA,aAAa,EAAEX,SAAS,CAACoC,MANV;AAOfxB,EAAAA,OAAO,EAAEZ,SAAS,CAACuC,IAPJ;AAQf1B,EAAAA,MAAM,EAAEb,SAAS,CAACuC,IARH;AASfzB,EAAAA,cAAc,EAAEZ,aAAa,CAACsC,KATf;AAUf9B,EAAAA,SAAS,EAAE+B,UAAU,CAACN,SAAX,CAAqBK,KAVjB;AAWftB,EAAAA,OAAO,EAAElB,SAAS,CAAC0C,IAXJ;AAYf3B,EAAAA,YAAY,EAAEf,SAAS,CAACoC,MAZT;AAafpB,EAAAA,QAAQ,EAAEhB,SAAS,CAACuC,IAbL;AAcftB,EAAAA,aAAa,EAAEf,aAAa,CAACsC;AAdd,CAAjB;AAiBApC,IAAI,CAACuC,YAAL,GAAoB;AAClBhC,EAAAA,aAAa,EAAE,OADG;AAElBC,EAAAA,OAAO,EAAE,KAFS;AAGlBC,EAAAA,MAAM,EAAE,KAHU;AAIlBL,EAAAA,IAAI,EAAE,EAJY;AAKlBC,EAAAA,KAAK,EAAE,OALW;AAMlBM,EAAAA,YAAY,EAAE,OANI;AAOlBC,EAAAA,QAAQ,EAAE,KAPQ;AAQlBV,EAAAA,IAAI,EAAE;AARY,CAApB;AAWA,IAAMqB,MAAM,GAAGF,UAAU,CAACmB,MAAX,CAAkB;AAC/BhB,EAAAA,MAAM,EAAE;AACNiB,IAAAA,MAAM,EAAE;AADF,GADuB;AAI/BhC,EAAAA,MAAM,oBACDiC,QAAQ,CAACC,MAAT,CAAgB;AACjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE;AADJ,KADQ;AAIjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,WAAW,EAAE,iBADN;AAEPC,MAAAA,YAAY,EAAE;AAAEtB,QAAAA,MAAM,EAAE,CAAV;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFP;AAGPsB,MAAAA,aAAa,EAAE,CAHR;AAIPC,MAAAA,YAAY,EAAE;AAJP;AAJQ,GAAhB,CADC,CAJyB;AAiB/BtC,EAAAA,QAAQ,EAAE;AACRgB,IAAAA,eAAe,EAAE;AADT;AAjBqB,CAAlB,CAAf;AAsBA,SAAS5B,IAAT;AACA,eAAeD,SAAS,CAACC,IAAD,EAAO,MAAP,CAAxB","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Platform,\r\n  TouchableHighlight,\r\n  View,\r\n  StyleSheet,\r\n  Text as NativeText,\r\n} from 'react-native';\r\n\r\nimport getIconType from '../helpers/getIconType';\r\nimport { ViewPropTypes, withTheme } from '../config';\r\n\r\nconst Icon = props => {\r\n  const {\r\n    type,\r\n    name,\r\n    size,\r\n    color,\r\n    iconStyle,\r\n    underlayColor,\r\n    reverse,\r\n    raised,\r\n    containerStyle,\r\n    reverseColor,\r\n    disabled,\r\n    disabledStyle,\r\n    onPress,\r\n    Component = onPress ? TouchableHighlight : View,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const IconComponent = getIconType(type);\r\n  const getBackgroundColor = () => {\r\n    if (reverse) {\r\n      return color;\r\n    }\r\n\r\n    return raised ? 'white' : 'transparent';\r\n  };\r\n\r\n  return (\r\n    <View style={containerStyle && containerStyle}>\r\n      <Component\r\n        {...attributes}\r\n        underlayColor={reverse ? color : underlayColor || color}\r\n        style={StyleSheet.flatten([\r\n          (reverse || raised) && styles.button,\r\n          (reverse || raised) && {\r\n            borderRadius: size + 4,\r\n            height: size * 2 + 4,\r\n            width: size * 2 + 4,\r\n          },\r\n          raised && styles.raised,\r\n          {\r\n            backgroundColor: getBackgroundColor(),\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          },\r\n          disabled && styles.disabled,\r\n          disabled && disabledStyle,\r\n        ])}\r\n        {...onPress && { disabled }}\r\n        onPress={onPress}\r\n      >\r\n        <IconComponent\r\n          testID=\"iconIcon\"\r\n          style={StyleSheet.flatten([\r\n            { backgroundColor: 'transparent' },\r\n            iconStyle && iconStyle,\r\n          ])}\r\n          size={size}\r\n          name={name}\r\n          color={reverse ? reverseColor : color}\r\n        />\r\n      </Component>\r\n    </View>\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  size: PropTypes.number,\r\n  color: PropTypes.string,\r\n  Component: PropTypes.elementType,\r\n  underlayColor: PropTypes.string,\r\n  reverse: PropTypes.bool,\r\n  raised: PropTypes.bool,\r\n  containerStyle: ViewPropTypes.style,\r\n  iconStyle: NativeText.propTypes.style,\r\n  onPress: PropTypes.func,\r\n  reverseColor: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  disabledStyle: ViewPropTypes.style,\r\n};\r\n\r\nIcon.defaultProps = {\r\n  underlayColor: 'white',\r\n  reverse: false,\r\n  raised: false,\r\n  size: 24,\r\n  color: 'black',\r\n  reverseColor: 'white',\r\n  disabled: false,\r\n  type: 'material',\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    margin: 7,\r\n  },\r\n  raised: {\r\n    ...Platform.select({\r\n      android: {\r\n        elevation: 2,\r\n      },\r\n      default: {\r\n        shadowColor: 'rgba(0,0,0, .4)',\r\n        shadowOffset: { height: 1, width: 1 },\r\n        shadowOpacity: 1,\r\n        shadowRadius: 1,\r\n      },\r\n    }),\r\n  },\r\n  disabled: {\r\n    backgroundColor: '#D1D5D8',\r\n  },\r\n});\r\n\r\nexport { Icon };\r\nexport default withTheme(Icon, 'Icon');\r\n"]},"metadata":{},"sourceType":"module"}