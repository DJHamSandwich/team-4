{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\team-4\\\\node_modules\\\\react-native-chart-kit\\\\src\\\\contribution-graph\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg, G, Text, Rect } from \"react-native-svg\";\nimport _ from \"lodash\";\nimport AbstractChart from \"../abstract-chart\";\nimport { DAYS_IN_WEEK, MILLISECONDS_IN_ONE_DAY, MONTH_LABELS } from \"./constants\";\nimport { shiftDate, getBeginningTimeForDate, convertToDate } from \"./dateHelpers\";\nvar SQUARE_SIZE = 20;\nvar MONTH_LABEL_GUTTER_SIZE = 8;\nvar paddingLeft = 32;\n\nfunction mapValue(x, in_min, in_max, out_min, out_max) {\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nvar ContributionGraph = function (_AbstractChart) {\n  _inherits(ContributionGraph, _AbstractChart);\n\n  function ContributionGraph(props) {\n    var _this;\n\n    _classCallCheck(this, ContributionGraph);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContributionGraph).call(this, props));\n\n    var _this$getValueCache = _this.getValueCache(props.values),\n        maxValue = _this$getValueCache.maxValue,\n        minValue = _this$getValueCache.minValue,\n        valueCache = _this$getValueCache.valueCache;\n\n    _this.state = {\n      maxValue: maxValue,\n      minValue: minValue,\n      valueCache: valueCache\n    };\n    return _this;\n  }\n\n  _createClass(ContributionGraph, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$getValueCache2 = this.getValueCache(nextProps.values),\n          maxValue = _this$getValueCache2.maxValue,\n          minValue = _this$getValueCache2.minValue,\n          valueCache = _this$getValueCache2.valueCache;\n\n      this.setState({\n        maxValue: maxValue,\n        minValue: minValue,\n        valueCache: valueCache\n      });\n    }\n  }, {\n    key: \"getSquareSizeWithGutter\",\n    value: function getSquareSizeWithGutter() {\n      return (this.props.squareSize || SQUARE_SIZE) + this.props.gutterSize;\n    }\n  }, {\n    key: \"getMonthLabelSize\",\n    value: function getMonthLabelSize() {\n      var _this$props$squareSiz = this.props.squareSize,\n          squareSize = _this$props$squareSiz === void 0 ? SQUARE_SIZE : _this$props$squareSiz;\n\n      if (!this.props.showMonthLabels) {\n        return 0;\n      }\n\n      if (this.props.horizontal) {\n        return squareSize + MONTH_LABEL_GUTTER_SIZE;\n      }\n\n      return 2 * (squareSize + MONTH_LABEL_GUTTER_SIZE);\n    }\n  }, {\n    key: \"getStartDate\",\n    value: function getStartDate() {\n      return shiftDate(this.getEndDate(), -this.props.numDays + 1);\n    }\n  }, {\n    key: \"getEndDate\",\n    value: function getEndDate() {\n      return getBeginningTimeForDate(convertToDate(this.props.endDate));\n    }\n  }, {\n    key: \"getStartDateWithEmptyDays\",\n    value: function getStartDateWithEmptyDays() {\n      return shiftDate(this.getStartDate(), -this.getNumEmptyDaysAtStart());\n    }\n  }, {\n    key: \"getNumEmptyDaysAtStart\",\n    value: function getNumEmptyDaysAtStart() {\n      return this.getStartDate().getDay();\n    }\n  }, {\n    key: \"getNumEmptyDaysAtEnd\",\n    value: function getNumEmptyDaysAtEnd() {\n      return DAYS_IN_WEEK - 1 - this.getEndDate().getDay();\n    }\n  }, {\n    key: \"getWeekCount\",\n    value: function getWeekCount() {\n      var numDaysRoundedToWeek = this.props.numDays + this.getNumEmptyDaysAtStart() + this.getNumEmptyDaysAtEnd();\n      return Math.ceil(numDaysRoundedToWeek / DAYS_IN_WEEK);\n    }\n  }, {\n    key: \"getWeekWidth\",\n    value: function getWeekWidth() {\n      return DAYS_IN_WEEK * this.getSquareSizeWithGutter();\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.getWeekCount() * this.getSquareSizeWithGutter() - this.props.gutterSize;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.getWeekWidth() + (this.getMonthLabelSize() - this.props.gutterSize);\n    }\n  }, {\n    key: \"getValueCache\",\n    value: function getValueCache(values) {\n      var _this2 = this;\n\n      var minValue = Infinity,\n          maxValue = -Infinity;\n      return {\n        valueCache: values.reduce(function (memo, value) {\n          var date = convertToDate(value.date);\n          var index = Math.floor((date - _this2.getStartDateWithEmptyDays()) / MILLISECONDS_IN_ONE_DAY);\n          minValue = Math.min(value.count, minValue);\n          maxValue = Math.max(value.count, maxValue);\n          memo[index] = {\n            value: value,\n            title: _this2.props.titleForValue ? _this2.props.titleForValue(value) : null,\n            tooltipDataAttrs: _this2.getTooltipDataAttrsForValue(value)\n          };\n          return memo;\n        }, {}),\n        minValue: minValue,\n        maxValue: maxValue\n      };\n    }\n  }, {\n    key: \"getValueForIndex\",\n    value: function getValueForIndex(index) {\n      if (this.state.valueCache[index]) {\n        return this.state.valueCache[index].value;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getClassNameForIndex\",\n    value: function getClassNameForIndex(index) {\n      if (this.state.valueCache[index]) {\n        if (this.state.valueCache[index].value) {\n          var count = this.state.valueCache[index].value.count;\n\n          if (count) {\n            var opacity = mapValue(count, this.state.minValue, this.state.maxValue, 0.15 + 0.05, 1);\n            return this.props.chartConfig.color(opacity);\n          }\n        }\n      }\n\n      return this.props.chartConfig.color(0.15);\n    }\n  }, {\n    key: \"getTitleForIndex\",\n    value: function getTitleForIndex(index) {\n      if (this.state.valueCache[index]) {\n        return this.state.valueCache[index].title;\n      }\n\n      return this.props.titleForValue ? this.props.titleForValue(null) : null;\n    }\n  }, {\n    key: \"getTooltipDataAttrsForIndex\",\n    value: function getTooltipDataAttrsForIndex(index) {\n      if (this.state.valueCache[index]) {\n        return this.state.valueCache[index].tooltipDataAttrs;\n      }\n\n      return this.getTooltipDataAttrsForValue({\n        date: null,\n        count: null\n      });\n    }\n  }, {\n    key: \"getTooltipDataAttrsForValue\",\n    value: function getTooltipDataAttrsForValue(value) {\n      var tooltipDataAttrs = this.props.tooltipDataAttrs;\n\n      if (typeof tooltipDataAttrs === \"function\") {\n        return tooltipDataAttrs(value);\n      }\n\n      return tooltipDataAttrs;\n    }\n  }, {\n    key: \"getTransformForWeek\",\n    value: function getTransformForWeek(weekIndex) {\n      if (this.props.horizontal) {\n        return [weekIndex * this.getSquareSizeWithGutter(), 50];\n      }\n\n      return [10, weekIndex * this.getSquareSizeWithGutter()];\n    }\n  }, {\n    key: \"getTransformForMonthLabels\",\n    value: function getTransformForMonthLabels() {\n      if (this.props.horizontal) {\n        return null;\n      }\n\n      return this.getWeekWidth() + MONTH_LABEL_GUTTER_SIZE + \", 0\";\n    }\n  }, {\n    key: \"getTransformForAllWeeks\",\n    value: function getTransformForAllWeeks() {\n      if (this.props.horizontal) {\n        return \"0, \" + (this.getMonthLabelSize() - 100);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getViewBox\",\n    value: function getViewBox() {\n      if (this.props.horizontal) {\n        return this.getWidth() + \" \" + this.getHeight();\n      }\n\n      return this.getHeight() + \" \" + this.getWidth();\n    }\n  }, {\n    key: \"getSquareCoordinates\",\n    value: function getSquareCoordinates(dayIndex) {\n      if (this.props.horizontal) {\n        return [0, dayIndex * this.getSquareSizeWithGutter()];\n      }\n\n      return [dayIndex * this.getSquareSizeWithGutter(), 0];\n    }\n  }, {\n    key: \"getMonthLabelCoordinates\",\n    value: function getMonthLabelCoordinates(weekIndex) {\n      if (this.props.horizontal) {\n        return [weekIndex * this.getSquareSizeWithGutter(), this.getMonthLabelSize() - MONTH_LABEL_GUTTER_SIZE];\n      }\n\n      var verticalOffset = -2;\n      return [0, (weekIndex + 1) * this.getSquareSizeWithGutter() + verticalOffset];\n    }\n  }, {\n    key: \"renderSquare\",\n    value: function renderSquare(dayIndex, index) {\n      var _this3 = this;\n\n      var indexOutOfRange = index < this.getNumEmptyDaysAtStart() || index >= this.getNumEmptyDaysAtStart() + this.props.numDays;\n\n      if (indexOutOfRange && !this.props.showOutOfRangeDays) {\n        return null;\n      }\n\n      var _this$getSquareCoordi = this.getSquareCoordinates(dayIndex),\n          _this$getSquareCoordi2 = _slicedToArray(_this$getSquareCoordi, 2),\n          x = _this$getSquareCoordi2[0],\n          y = _this$getSquareCoordi2[1];\n\n      var _this$props$squareSiz2 = this.props.squareSize,\n          squareSize = _this$props$squareSiz2 === void 0 ? SQUARE_SIZE : _this$props$squareSiz2;\n      return React.createElement(Rect, _extends({\n        key: index,\n        width: squareSize,\n        height: squareSize,\n        x: x + paddingLeft,\n        y: y,\n        title: this.getTitleForIndex(index),\n        fill: this.getClassNameForIndex(index),\n        onPress: function onPress() {\n          _this3.handleDayPress(index);\n        }\n      }, this.getTooltipDataAttrsForIndex(index), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        }\n      }));\n    }\n  }, {\n    key: \"handleDayPress\",\n    value: function handleDayPress(index) {\n      if (!this.props.onDayPress) {\n        return;\n      }\n\n      this.props.onDayPress(this.state.valueCache[index] && this.state.valueCache[index].value ? this.state.valueCache[index].value : {\n        count: 0,\n        date: new Date(this.getStartDate().valueOf() + index * MILLISECONDS_IN_ONE_DAY)\n      });\n    }\n  }, {\n    key: \"renderWeek\",\n    value: function renderWeek(weekIndex) {\n      var _this4 = this;\n\n      var _this$getTransformFor = this.getTransformForWeek(weekIndex),\n          _this$getTransformFor2 = _slicedToArray(_this$getTransformFor, 2),\n          x = _this$getTransformFor2[0],\n          y = _this$getTransformFor2[1];\n\n      return React.createElement(G, {\n        key: weekIndex,\n        x: x,\n        y: y,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        }\n      }, _.range(DAYS_IN_WEEK).map(function (dayIndex) {\n        return _this4.renderSquare(dayIndex, weekIndex * DAYS_IN_WEEK + dayIndex);\n      }));\n    }\n  }, {\n    key: \"renderAllWeeks\",\n    value: function renderAllWeeks() {\n      var _this5 = this;\n\n      return _.range(this.getWeekCount()).map(function (weekIndex) {\n        return _this5.renderWeek(weekIndex);\n      });\n    }\n  }, {\n    key: \"renderMonthLabels\",\n    value: function renderMonthLabels() {\n      var _this6 = this;\n\n      if (!this.props.showMonthLabels) {\n        return null;\n      }\n\n      var weekRange = _.range(this.getWeekCount() - 1);\n\n      return weekRange.map(function (weekIndex) {\n        var endOfWeek = shiftDate(_this6.getStartDateWithEmptyDays(), (weekIndex + 1) * DAYS_IN_WEEK);\n\n        var _this6$getMonthLabelC = _this6.getMonthLabelCoordinates(weekIndex),\n            _this6$getMonthLabelC2 = _slicedToArray(_this6$getMonthLabelC, 2),\n            x = _this6$getMonthLabelC2[0],\n            y = _this6$getMonthLabelC2[1];\n\n        return endOfWeek.getDate() >= 1 && endOfWeek.getDate() <= DAYS_IN_WEEK ? React.createElement(Text, _extends({\n          key: weekIndex,\n          x: x + paddingLeft,\n          y: y + 8\n        }, _this6.getPropsForLabels(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313\n          }\n        }), _this6.props.getMonthLabel ? _this6.props.getMonthLabel(endOfWeek.getMonth()) : MONTH_LABELS[endOfWeek.getMonth()]) : null;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$style = this.props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style;\n      var _style$borderRadius = style.borderRadius,\n          borderRadius = _style$borderRadius === void 0 ? 0 : _style$borderRadius;\n\n      if (!borderRadius && this.props.chartConfig.style) {\n        var stupidXo = this.props.chartConfig.style.borderRadius;\n        borderRadius = stupidXo;\n      }\n\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        }\n      }, React.createElement(Svg, {\n        height: this.props.height,\n        width: this.props.width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        }\n      }, this.renderDefs(_objectSpread({\n        width: this.props.width,\n        height: this.props.height\n      }, this.props.chartConfig)), React.createElement(Rect, {\n        width: \"100%\",\n        height: this.props.height,\n        rx: borderRadius,\n        ry: borderRadius,\n        fill: \"url(#backgroundGradient)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        }\n      }), React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        }\n      }, this.renderMonthLabels()), React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        }\n      }, this.renderAllWeeks())));\n    }\n  }]);\n\n  return ContributionGraph;\n}(AbstractChart);\n\nContributionGraph.defaultProps = {\n  numDays: 200,\n  endDate: new Date(),\n  gutterSize: 1,\n  squareSize: SQUARE_SIZE,\n  horizontal: true,\n  showMonthLabels: true,\n  showOutOfRangeDays: false,\n  classForValue: function classForValue(value) {\n    return value ? \"black\" : \"#8cc665\";\n  }\n};\nexport default ContributionGraph;","map":{"version":3,"sources":["C:/Users/User/Desktop/team-4/node_modules/react-native-chart-kit/src/contribution-graph/index.js"],"names":["React","Svg","G","Text","Rect","_","AbstractChart","DAYS_IN_WEEK","MILLISECONDS_IN_ONE_DAY","MONTH_LABELS","shiftDate","getBeginningTimeForDate","convertToDate","SQUARE_SIZE","MONTH_LABEL_GUTTER_SIZE","paddingLeft","mapValue","x","in_min","in_max","out_min","out_max","ContributionGraph","props","getValueCache","values","maxValue","minValue","valueCache","state","nextProps","setState","squareSize","gutterSize","showMonthLabels","horizontal","getEndDate","numDays","endDate","getStartDate","getNumEmptyDaysAtStart","getDay","numDaysRoundedToWeek","getNumEmptyDaysAtEnd","Math","ceil","getSquareSizeWithGutter","getWeekCount","getWeekWidth","getMonthLabelSize","Infinity","reduce","memo","value","date","index","floor","getStartDateWithEmptyDays","min","count","max","title","titleForValue","tooltipDataAttrs","getTooltipDataAttrsForValue","opacity","chartConfig","color","weekIndex","getWidth","getHeight","dayIndex","verticalOffset","indexOutOfRange","showOutOfRangeDays","getSquareCoordinates","y","getTitleForIndex","getClassNameForIndex","handleDayPress","getTooltipDataAttrsForIndex","onDayPress","Date","valueOf","getTransformForWeek","range","map","renderSquare","renderWeek","weekRange","endOfWeek","getMonthLabelCoordinates","getDate","getPropsForLabels","getMonthLabel","getMonth","style","borderRadius","stupidXo","height","width","renderDefs","renderMonthLabels","renderAllWeeks","defaultProps","classForValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Svg, G, Text, Rect } from \"react-native-svg\";\r\nimport _ from \"lodash\";\r\nimport AbstractChart from \"../abstract-chart\";\r\nimport {\r\n  DAYS_IN_WEEK,\r\n  MILLISECONDS_IN_ONE_DAY,\r\n  MONTH_LABELS\r\n} from \"./constants\";\r\nimport {\r\n  shiftDate,\r\n  getBeginningTimeForDate,\r\n  convertToDate\r\n} from \"./dateHelpers\";\r\n\r\nconst SQUARE_SIZE = 20;\r\nconst MONTH_LABEL_GUTTER_SIZE = 8;\r\nconst paddingLeft = 32;\r\n\r\nfunction mapValue(x, in_min, in_max, out_min, out_max) {\r\n  return ((x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\r\n}\r\n\r\nclass ContributionGraph extends AbstractChart {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let { maxValue, minValue, valueCache } = this.getValueCache(props.values);\r\n\r\n    this.state = {\r\n      maxValue,\r\n      minValue,\r\n      valueCache\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    let { maxValue, minValue, valueCache } = this.getValueCache(\r\n      nextProps.values\r\n    );\r\n\r\n    this.setState({\r\n      maxValue,\r\n      minValue,\r\n      valueCache\r\n    });\r\n  }\r\n\r\n  getSquareSizeWithGutter() {\r\n    return (this.props.squareSize || SQUARE_SIZE) + this.props.gutterSize;\r\n  }\r\n\r\n  getMonthLabelSize() {\r\n    let { squareSize = SQUARE_SIZE } = this.props;\r\n    if (!this.props.showMonthLabels) {\r\n      return 0;\r\n    }\r\n    if (this.props.horizontal) {\r\n      return squareSize + MONTH_LABEL_GUTTER_SIZE;\r\n    }\r\n    return 2 * (squareSize + MONTH_LABEL_GUTTER_SIZE);\r\n  }\r\n\r\n  getStartDate() {\r\n    return shiftDate(this.getEndDate(), -this.props.numDays + 1); // +1 because endDate is inclusive\r\n  }\r\n\r\n  getEndDate() {\r\n    return getBeginningTimeForDate(convertToDate(this.props.endDate));\r\n  }\r\n\r\n  getStartDateWithEmptyDays() {\r\n    return shiftDate(this.getStartDate(), -this.getNumEmptyDaysAtStart());\r\n  }\r\n\r\n  getNumEmptyDaysAtStart() {\r\n    return this.getStartDate().getDay();\r\n  }\r\n\r\n  getNumEmptyDaysAtEnd() {\r\n    return DAYS_IN_WEEK - 1 - this.getEndDate().getDay();\r\n  }\r\n\r\n  getWeekCount() {\r\n    const numDaysRoundedToWeek =\r\n      this.props.numDays +\r\n      this.getNumEmptyDaysAtStart() +\r\n      this.getNumEmptyDaysAtEnd();\r\n    return Math.ceil(numDaysRoundedToWeek / DAYS_IN_WEEK);\r\n  }\r\n\r\n  getWeekWidth() {\r\n    return DAYS_IN_WEEK * this.getSquareSizeWithGutter();\r\n  }\r\n\r\n  getWidth() {\r\n    return (\r\n      this.getWeekCount() * this.getSquareSizeWithGutter() -\r\n      this.props.gutterSize\r\n    );\r\n  }\r\n\r\n  getHeight() {\r\n    return (\r\n      this.getWeekWidth() + (this.getMonthLabelSize() - this.props.gutterSize)\r\n    );\r\n  }\r\n\r\n  getValueCache(values) {\r\n    let minValue = Infinity,\r\n      maxValue = -Infinity;\r\n\r\n    return {\r\n      valueCache: values.reduce((memo, value) => {\r\n        const date = convertToDate(value.date);\r\n        const index = Math.floor(\r\n          (date - this.getStartDateWithEmptyDays()) / MILLISECONDS_IN_ONE_DAY\r\n        );\r\n\r\n        minValue = Math.min(value.count, minValue);\r\n        maxValue = Math.max(value.count, maxValue);\r\n\r\n        memo[index] = {\r\n          value,\r\n          title: this.props.titleForValue\r\n            ? this.props.titleForValue(value)\r\n            : null,\r\n          tooltipDataAttrs: this.getTooltipDataAttrsForValue(value)\r\n        };\r\n        return memo;\r\n      }, {}),\r\n      minValue,\r\n      maxValue\r\n    };\r\n  }\r\n\r\n  getValueForIndex(index) {\r\n    if (this.state.valueCache[index]) {\r\n      return this.state.valueCache[index].value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getClassNameForIndex(index) {\r\n    if (this.state.valueCache[index]) {\r\n      if (this.state.valueCache[index].value) {\r\n        const count = this.state.valueCache[index].value.count;\r\n\r\n        if (count) {\r\n          const opacity = mapValue(\r\n            count,\r\n            this.state.minValue,\r\n            this.state.maxValue,\r\n            0.15 + 0.05, // + 0.05 to make smaller values a bit more visible\r\n            1\r\n          );\r\n\r\n          return this.props.chartConfig.color(opacity);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.props.chartConfig.color(0.15);\r\n  }\r\n\r\n  getTitleForIndex(index) {\r\n    if (this.state.valueCache[index]) {\r\n      return this.state.valueCache[index].title;\r\n    }\r\n    return this.props.titleForValue ? this.props.titleForValue(null) : null;\r\n  }\r\n\r\n  getTooltipDataAttrsForIndex(index) {\r\n    if (this.state.valueCache[index]) {\r\n      return this.state.valueCache[index].tooltipDataAttrs;\r\n    }\r\n    return this.getTooltipDataAttrsForValue({ date: null, count: null });\r\n  }\r\n\r\n  getTooltipDataAttrsForValue(value) {\r\n    const { tooltipDataAttrs } = this.props;\r\n\r\n    if (typeof tooltipDataAttrs === \"function\") {\r\n      return tooltipDataAttrs(value);\r\n    }\r\n    return tooltipDataAttrs;\r\n  }\r\n\r\n  getTransformForWeek(weekIndex) {\r\n    if (this.props.horizontal) {\r\n      return [weekIndex * this.getSquareSizeWithGutter(), 50];\r\n    }\r\n    return [10, weekIndex * this.getSquareSizeWithGutter()];\r\n  }\r\n\r\n  getTransformForMonthLabels() {\r\n    if (this.props.horizontal) {\r\n      return null;\r\n    }\r\n    return `${this.getWeekWidth() + MONTH_LABEL_GUTTER_SIZE}, 0`;\r\n  }\r\n\r\n  getTransformForAllWeeks() {\r\n    if (this.props.horizontal) {\r\n      return `0, ${this.getMonthLabelSize() - 100}`;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getViewBox() {\r\n    if (this.props.horizontal) {\r\n      return `${this.getWidth()} ${this.getHeight()}`;\r\n    }\r\n    return `${this.getHeight()} ${this.getWidth()}`;\r\n  }\r\n\r\n  getSquareCoordinates(dayIndex) {\r\n    if (this.props.horizontal) {\r\n      return [0, dayIndex * this.getSquareSizeWithGutter()];\r\n    }\r\n    return [dayIndex * this.getSquareSizeWithGutter(), 0];\r\n  }\r\n\r\n  getMonthLabelCoordinates(weekIndex) {\r\n    if (this.props.horizontal) {\r\n      return [\r\n        weekIndex * this.getSquareSizeWithGutter(),\r\n        this.getMonthLabelSize() - MONTH_LABEL_GUTTER_SIZE\r\n      ];\r\n    }\r\n    const verticalOffset = -2;\r\n    return [\r\n      0,\r\n      (weekIndex + 1) * this.getSquareSizeWithGutter() + verticalOffset\r\n    ];\r\n  }\r\n\r\n  renderSquare(dayIndex, index) {\r\n    const indexOutOfRange =\r\n      index < this.getNumEmptyDaysAtStart() ||\r\n      index >= this.getNumEmptyDaysAtStart() + this.props.numDays;\r\n\r\n    if (indexOutOfRange && !this.props.showOutOfRangeDays) {\r\n      return null;\r\n    }\r\n\r\n    const [x, y] = this.getSquareCoordinates(dayIndex);\r\n    const { squareSize = SQUARE_SIZE } = this.props;\r\n\r\n    return (\r\n      <Rect\r\n        key={index}\r\n        width={squareSize}\r\n        height={squareSize}\r\n        x={x + paddingLeft}\r\n        y={y}\r\n        title={this.getTitleForIndex(index)}\r\n        fill={this.getClassNameForIndex(index)}\r\n        onPress={() => {\r\n          this.handleDayPress(index);\r\n        }}\r\n        {...this.getTooltipDataAttrsForIndex(index)}\r\n      />\r\n    );\r\n  }\r\n\r\n  handleDayPress(index) {\r\n    if (!this.props.onDayPress) {\r\n      return;\r\n    }\r\n    this.props.onDayPress(\r\n      this.state.valueCache[index] && this.state.valueCache[index].value\r\n        ? this.state.valueCache[index].value\r\n        : {\r\n            count: 0,\r\n            date: new Date(\r\n              this.getStartDate().valueOf() + index * MILLISECONDS_IN_ONE_DAY\r\n            )\r\n          }\r\n    );\r\n  }\r\n\r\n  renderWeek(weekIndex) {\r\n    const [x, y] = this.getTransformForWeek(weekIndex);\r\n    return (\r\n      <G key={weekIndex} x={x} y={y}>\r\n        {_.range(DAYS_IN_WEEK).map(dayIndex =>\r\n          this.renderSquare(dayIndex, weekIndex * DAYS_IN_WEEK + dayIndex)\r\n        )}\r\n      </G>\r\n    );\r\n  }\r\n\r\n  renderAllWeeks() {\r\n    return _.range(this.getWeekCount()).map(weekIndex =>\r\n      this.renderWeek(weekIndex)\r\n    );\r\n  }\r\n\r\n  renderMonthLabels() {\r\n    if (!this.props.showMonthLabels) {\r\n      return null;\r\n    }\r\n    const weekRange = _.range(this.getWeekCount() - 1); // don't render for last week, because label will be cut off\r\n    return weekRange.map(weekIndex => {\r\n      const endOfWeek = shiftDate(\r\n        this.getStartDateWithEmptyDays(),\r\n        (weekIndex + 1) * DAYS_IN_WEEK\r\n      );\r\n      const [x, y] = this.getMonthLabelCoordinates(weekIndex);\r\n      return endOfWeek.getDate() >= 1 && endOfWeek.getDate() <= DAYS_IN_WEEK ? (\r\n        <Text\r\n          key={weekIndex}\r\n          x={x + paddingLeft}\r\n          y={y + 8}\r\n          {...this.getPropsForLabels()}\r\n        >\r\n          {this.props.getMonthLabel\r\n            ? this.props.getMonthLabel(endOfWeek.getMonth())\r\n            : MONTH_LABELS[endOfWeek.getMonth()]}\r\n        </Text>\r\n      ) : null;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { style = {} } = this.props;\r\n    let { borderRadius = 0 } = style;\r\n    if (!borderRadius && this.props.chartConfig.style) {\r\n      const stupidXo = this.props.chartConfig.style.borderRadius;\r\n      borderRadius = stupidXo;\r\n    }\r\n    return (\r\n      <View style={style}>\r\n        <Svg height={this.props.height} width={this.props.width}>\r\n          {this.renderDefs({\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            ...this.props.chartConfig\r\n          })}\r\n          <Rect\r\n            width=\"100%\"\r\n            height={this.props.height}\r\n            rx={borderRadius}\r\n            ry={borderRadius}\r\n            fill=\"url(#backgroundGradient)\"\r\n          />\r\n          <G>{this.renderMonthLabels()}</G>\r\n          <G>{this.renderAllWeeks()}</G>\r\n        </Svg>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nContributionGraph.defaultProps = {\r\n  numDays: 200,\r\n  endDate: new Date(),\r\n  gutterSize: 1,\r\n  squareSize: SQUARE_SIZE,\r\n  horizontal: true,\r\n  showMonthLabels: true,\r\n  showOutOfRangeDays: false,\r\n  classForValue: value => (value ? \"black\" : \"#8cc665\")\r\n};\r\n\r\nexport default ContributionGraph;\r\n"]},"metadata":{},"sourceType":"module"}