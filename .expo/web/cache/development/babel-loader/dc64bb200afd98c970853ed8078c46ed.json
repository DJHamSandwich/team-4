{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\files\\\\app\\\\team-4\\\\node_modules\\\\react-native-chart-kit\\\\src\\\\stackedbar-chart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg, Rect, G, Text } from \"react-native-svg\";\nimport AbstractChart from \"./abstract-chart\";\nvar barWidth = 32;\n\nvar StackedBarChart = function (_AbstractChart) {\n  _inherits(StackedBarChart, _AbstractChart);\n\n  function StackedBarChart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackedBarChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackedBarChart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getBarPercentage = function () {\n      var _this$props$chartConf = _this.props.chartConfig.barPercentage,\n          barPercentage = _this$props$chartConf === void 0 ? 1 : _this$props$chartConf;\n      return barPercentage;\n    };\n\n    _this.getBarRadius = function (ret, x) {\n      return _this.props.chartConfig.barRadius && ret.length === x.length - 1 ? _this.props.chartConfig.barRadius : 0;\n    };\n\n    _this.renderBars = function (config) {\n      var data = config.data,\n          width = config.width,\n          height = config.height,\n          paddingTop = config.paddingTop,\n          paddingRight = config.paddingRight,\n          border = config.border,\n          colors = config.colors,\n          _config$stackedBar = config.stackedBar,\n          stackedBar = _config$stackedBar === void 0 ? false : _config$stackedBar;\n      return data.map(function (x, i) {\n        var barWidth = 32 * _this.getBarPercentage();\n\n        var ret = [];\n        var h = 0;\n        var st = paddingTop;\n        var fac = 1;\n\n        if (stackedBar) {\n          fac = .7;\n        }\n\n        for (var z = 0; z < x.length; z++) {\n          h = (height - 55) * (x[z] / border);\n          var y = height / 4 * 3 - h + st;\n          var xC = (paddingRight + i * (width - paddingRight) / data.length + barWidth / 2) * fac;\n          ret.push(React.createElement(Rect, {\n            key: Math.random(),\n            x: xC,\n            y: y,\n            rx: _this.getBarRadius(ret, x),\n            ry: _this.getBarRadius(ret, x),\n            width: barWidth,\n            height: h,\n            fill: colors[z],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            }\n          }));\n\n          if (!_this.props.hideLegend) {\n            ret.push(React.createElement(Text, _extends({\n              key: Math.random(),\n              x: xC + 7 + barWidth / 2,\n              textAnchor: \"end\",\n              y: h > 15 ? y + 15 : y + 7\n            }, _this.getPropsForLabels(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n              }\n            }), x[z]));\n          }\n\n          st -= h;\n        }\n\n        return ret;\n      });\n    };\n\n    _this.renderLegend = function (config) {\n      var legend = config.legend,\n          colors = config.colors,\n          width = config.width,\n          height = config.height;\n      return legend.map(function (x, i) {\n        return React.createElement(G, {\n          key: Math.random(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          }\n        }, React.createElement(Rect, {\n          width: \"16px\",\n          height: \"16px\",\n          fill: colors[i],\n          rx: 8,\n          ry: 8,\n          x: width * 0.71,\n          y: height * 0.7 - i * 50,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          }\n        }), React.createElement(Text, _extends({\n          x: width * 0.78,\n          y: height * 0.76 - i * 50\n        }, _this.getPropsForLabels(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          }\n        }), x));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StackedBarChart, [{\n    key: \"render\",\n    value: function render() {\n      var paddingTop = 15;\n      var paddingRight = 50;\n      var _this$props = this.props,\n          width = _this$props.width,\n          height = _this$props.height,\n          _this$props$style = _this$props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style,\n          data = _this$props.data,\n          _this$props$withHoriz = _this$props.withHorizontalLabels,\n          withHorizontalLabels = _this$props$withHoriz === void 0 ? true : _this$props$withHoriz,\n          _this$props$withVerti = _this$props.withVerticalLabels,\n          withVerticalLabels = _this$props$withVerti === void 0 ? true : _this$props$withVerti,\n          _this$props$segments = _this$props.segments,\n          segments = _this$props$segments === void 0 ? 4 : _this$props$segments,\n          decimalPlaces = _this$props.decimalPlaces;\n      var _style$borderRadius = style.borderRadius,\n          borderRadius = _style$borderRadius === void 0 ? 0 : _style$borderRadius;\n      var config = {\n        width: width,\n        height: height\n      };\n      var border = 0;\n\n      for (var i = 0; i < data.data.length; i++) {\n        var actual = data.data[i].reduce(function (pv, cv) {\n          return pv + cv;\n        }, 0);\n\n        if (actual > border) {\n          border = actual;\n        }\n      }\n\n      var stackedBar = data.legend && data.legend.length == 0 ? false : true;\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        }\n      }, React.createElement(Svg, {\n        height: height,\n        width: width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        }\n      }, this.renderDefs(_objectSpread({}, config, {}, this.props.chartConfig)), React.createElement(Rect, {\n        width: \"100%\",\n        height: height,\n        rx: borderRadius,\n        ry: borderRadius,\n        fill: \"url(#backgroundGradient)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        }\n      }), React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        }\n      }, this.renderHorizontalLines(_objectSpread({}, config, {\n        count: segments,\n        paddingTop: paddingTop\n      }))), React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        }\n      }, withHorizontalLabels ? this.renderHorizontalLabels(_objectSpread({}, config, {\n        count: segments,\n        data: [0, border],\n        paddingTop: paddingTop,\n        paddingRight: paddingRight,\n        decimalPlaces: decimalPlaces\n      })) : null), React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        }\n      }, withVerticalLabels ? this.renderVerticalLabels(_objectSpread({}, config, {\n        labels: data.labels,\n        paddingRight: paddingRight + 28,\n        stackedBar: stackedBar,\n        paddingTop: paddingTop,\n        horizontalOffset: barWidth\n      })) : null), React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      }, this.renderBars(_objectSpread({}, config, {\n        data: data.data,\n        border: border,\n        colors: this.props.data.barColors,\n        paddingTop: paddingTop,\n        paddingRight: paddingRight + 20,\n        stackedBar: stackedBar\n      }))), data.legend && data.legend.length != 0 && this.renderLegend(_objectSpread({}, config, {\n        legend: data.legend,\n        colors: this.props.data.barColors\n      }))));\n    }\n  }]);\n\n  return StackedBarChart;\n}(AbstractChart);\n\nexport default StackedBarChart;","map":{"version":3,"sources":["D:/files/app/team-4/node_modules/react-native-chart-kit/src/stackedbar-chart.js"],"names":["React","Svg","Rect","G","Text","AbstractChart","barWidth","StackedBarChart","getBarPercentage","props","chartConfig","barPercentage","getBarRadius","ret","x","barRadius","length","renderBars","config","data","width","height","paddingTop","paddingRight","border","colors","stackedBar","map","i","h","st","fac","z","y","xC","push","Math","random","hideLegend","getPropsForLabels","renderLegend","legend","style","withHorizontalLabels","withVerticalLabels","segments","decimalPlaces","borderRadius","actual","reduce","pv","cv","renderDefs","renderHorizontalLines","count","renderHorizontalLabels","renderVerticalLabels","labels","horizontalOffset","barColors"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Svg, Rect, G, Text } from \"react-native-svg\";\r\nimport AbstractChart from \"./abstract-chart\";\r\n\r\nconst barWidth = 32;\r\n\r\nclass StackedBarChart extends AbstractChart {\r\n\r\n  getBarPercentage = () => {\r\n    const { barPercentage = 1 } = this.props.chartConfig;\r\n    return barPercentage;\r\n  };\r\n\r\n  getBarRadius = (ret, x) => {\r\n    return this.props.chartConfig.barRadius && ret.length === x.length - 1\r\n      ? this.props.chartConfig.barRadius\r\n      : 0;\r\n  };\r\n\r\n  renderBars = config => {\r\n    const {\r\n      data,\r\n      width,\r\n      height,\r\n      paddingTop,\r\n      paddingRight,\r\n      border,\r\n      colors,\r\n      stackedBar = false\r\n    } = config;\r\n    return data.map((x, i) => {\r\n      const barWidth = 32 * this.getBarPercentage();\r\n      const ret = [];\r\n      let h = 0;\r\n      let st = paddingTop;\r\n      let fac = 1;\r\n      if(stackedBar) {\r\n        fac = .7;\r\n      }\r\n      for (let z = 0; z < x.length; z++) {\r\n        h = (height - 55) * (x[z] / border);\r\n        const y = (height / 4) * 3 - h + st;\r\n        const xC =\r\n          (paddingRight +\r\n            (i * (width - paddingRight)) / data.length +\r\n            barWidth / 2) *\r\n            fac;\r\n        ret.push(\r\n          <Rect\r\n            key={Math.random()}\r\n            x={xC}\r\n            y={y}\r\n            rx={this.getBarRadius(ret, x)}\r\n            ry={this.getBarRadius(ret, x)}\r\n            width={barWidth}\r\n            height={h}\r\n            fill={colors[z]}\r\n          />\r\n        );\r\n        if (!this.props.hideLegend) {\r\n          ret.push(\r\n            <Text\r\n              key={Math.random()}\r\n              x={xC + 7 + barWidth / 2}\r\n              textAnchor=\"end\"\r\n              y={h > 15 ? y + 15 : y + 7}\r\n              {...this.getPropsForLabels()}\r\n            >\r\n              {x[z]}\r\n            </Text>\r\n          );\r\n        }\r\n\r\n        st -= h;\r\n      }\r\n\r\n      return ret;\r\n    });\r\n  };\r\n\r\n  renderLegend = config => {\r\n    const { legend, colors, width, height } = config;\r\n    return legend.map((x, i) => {\r\n      return (\r\n        <G key={Math.random()}>\r\n          <Rect\r\n            width=\"16px\"\r\n            height=\"16px\"\r\n            fill={colors[i]}\r\n            rx={8}\r\n            ry={8}\r\n            x={width * 0.71}\r\n            y={height * 0.7 - i * 50}\r\n          />\r\n          <Text\r\n            x={width * 0.78}\r\n            y={height * 0.76 - i * 50}\r\n            {...this.getPropsForLabels()}\r\n          >\r\n            {x}\r\n          </Text>\r\n        </G>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const paddingTop = 15;\r\n    const paddingRight = 50;\r\n    const {\r\n      width,\r\n      height,\r\n      style = {},\r\n      data,\r\n      withHorizontalLabels = true,\r\n      withVerticalLabels = true,\r\n      segments = 4,\r\n      decimalPlaces\r\n    } = this.props;\r\n    const { borderRadius = 0 } = style;\r\n    const config = {\r\n      width,\r\n      height\r\n    };\r\n    let border = 0;\r\n    for (let i = 0; i < data.data.length; i++) {\r\n      const actual = data.data[i].reduce((pv, cv) => pv + cv, 0);\r\n      if (actual > border) {\r\n        border = actual;\r\n      }\r\n    }\r\n    var stackedBar = data.legend && data.legend.length == 0 ? false : true;\r\n    return (\r\n      <View style={style}>\r\n        <Svg height={height} width={width}>\r\n          {this.renderDefs({\r\n            ...config,\r\n            ...this.props.chartConfig\r\n          })}\r\n          <Rect\r\n            width=\"100%\"\r\n            height={height}\r\n            rx={borderRadius}\r\n            ry={borderRadius}\r\n            fill=\"url(#backgroundGradient)\"\r\n          />\r\n          <G>\r\n            {this.renderHorizontalLines({\r\n              ...config,\r\n              count: segments,\r\n              paddingTop\r\n            })}\r\n          </G>\r\n          <G>\r\n            {withHorizontalLabels\r\n              ? this.renderHorizontalLabels({\r\n                  ...config,\r\n                  count: segments,\r\n                  data: [0, border],\r\n                  paddingTop,\r\n                  paddingRight,\r\n                  decimalPlaces\r\n                })\r\n              : null}\r\n          </G>\r\n          <G>\r\n            {withVerticalLabels\r\n              ? this.renderVerticalLabels({\r\n                  ...config,\r\n                  labels: data.labels,\r\n                  paddingRight: paddingRight + 28,\r\n                  stackedBar,\r\n                  paddingTop,\r\n                  horizontalOffset: barWidth\r\n                })\r\n              : null}\r\n          </G>\r\n          <G>\r\n            {this.renderBars({\r\n              ...config,\r\n              data: data.data,\r\n              border,\r\n              colors: this.props.data.barColors,\r\n              paddingTop,\r\n              paddingRight: paddingRight + 20,\r\n              stackedBar,\r\n            })}\r\n          </G>\r\n          {data.legend && data.legend.length != 0 && this.renderLegend({\r\n            ...config,\r\n            legend: data.legend,\r\n            colors: this.props.data.barColors\r\n          })}\r\n        </Svg>\r\n      </View>\r\n    );\r\n  }\r\n}\r\nexport default StackedBarChart;\r\n"]},"metadata":{},"sourceType":"module"}